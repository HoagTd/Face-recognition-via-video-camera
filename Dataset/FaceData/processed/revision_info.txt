arguments: src/align_dataset_mtcnn.py Dataset/FaceData/raw Dataset/FaceData/processed --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25
--------------------
tensorflow version: 2.5.2
--------------------
git hash: b'62b1e0c7a4ede2deb8388de8933d08a7f487b159'
--------------------
b'diff --git a/requirements.txt b/requirements.txt\nindex f7084e9..15ddf89 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,6 +1,6 @@\n-tensorflow==1.15.5\n+tensorflow\n keras==2.3.1\n-scipy==1.1.0\n+scipy\n scikit-learn\n opencv-python\n h5py\ndiff --git a/src/align/detect_face.py b/src/align/detect_face.py\nindex 7f98ca7..68ff681 100644\n--- a/src/align/detect_face.py\n+++ b/src/align/detect_face.py\n@@ -29,7 +29,9 @@ from __future__ import print_function\n from six import string_types, iteritems\n \n import numpy as np\n-import tensorflow as tf\n+#import tensorflow as tf\n+import tensorflow.compat.v1 as tf\n+tf.disable_v2_behavior()\n #from math import floor\n import cv2\n import os\n@@ -82,7 +84,7 @@ class Network(object):\n         session: The current TensorFlow session\n         ignore_missing: If true, serialized weights for missing layers are ignored.\n         """\n-        data_dict = np.load(data_path, encoding=\'latin1\').item() #pylint: disable=no-member\n+        data_dict = np.load(data_path, encoding=\'latin1\', allow_pickle=True).item() #pylint: disable=no-member\n \n         for op_name in data_dict:\n             with tf.variable_scope(op_name, reuse=True):\ndiff --git a/src/align_dataset_mtcnn.py b/src/align_dataset_mtcnn.py\nindex 7d5e735..b25f048 100644\n--- a/src/align_dataset_mtcnn.py\n+++ b/src/align_dataset_mtcnn.py\n@@ -26,10 +26,17 @@ from __future__ import division\n from __future__ import print_function\n \n from scipy import misc\n+from matplotlib.pyplot import imread\n+from PIL import Image\n+from skimage.transform import resize\n+import imageio\n+import scipy.misc\n import sys\n import os\n import argparse\n-import tensorflow as tf\n+#import tensorflow as tf\n+import tensorflow.compat.v1 as tf\n+tf.disable_v2_behavior()\n import numpy as np\n import facenet\n import align.detect_face\n@@ -49,7 +56,7 @@ def main(args):\n     print(\'Creating networks and loading parameters\')\n     \n     with tf.Graph().as_default():\n-        gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n+        gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n         sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n         with sess.as_default():\n             pnet, rnet, onet = align.detect_face.create_mtcnn(sess, None)\n@@ -80,7 +87,7 @@ def main(args):\n                 print(image_path)\n                 if not os.path.exists(output_filename):\n                     try:\n-                        img = misc.imread(image_path)\n+                        img = imread(image_path)\n                     except (IOError, ValueError, IndexError) as e:\n                         errorMessage = \'{}: {}\'.format(image_path, e)\n                         print(errorMessage)\n@@ -121,14 +128,14 @@ def main(args):\n                                 bb[2] = np.minimum(det[2]+args.margin/2, img_size[1])\n                                 bb[3] = np.minimum(det[3]+args.margin/2, img_size[0])\n                                 cropped = img[bb[1]:bb[3],bb[0]:bb[2],:]\n-                                scaled = misc.imresize(cropped, (args.image_size, args.image_size), interp=\'bilinear\')\n+                                scaled = resize(cropped, (args.image_size, args.image_size))\n                                 nrof_successfully_aligned += 1\n                                 filename_base, file_extension = os.path.splitext(output_filename)\n                                 if args.detect_multiple_faces:\n                                     output_filename_n = "{}_{}{}".format(filename_base, i, file_extension)\n                                 else:\n                                     output_filename_n = "{}{}".format(filename_base, file_extension)\n-                                misc.imsave(output_filename_n, scaled)\n+                                imageio.imwrite(output_filename_n, scaled)\n                                 text_file.write(\'%s %d %d %d %d\\n\' % (output_filename_n, bb[0], bb[1], bb[2], bb[3]))\n                         else:\n                             print(\'Unable to align "%s"\' % image_path)\ndiff --git a/src/classifier.py b/src/classifier.py\nindex e7189bc..e2c6d99 100644\n--- a/src/classifier.py\n+++ b/src/classifier.py\n@@ -26,7 +26,9 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow as tf\n+#import tensorflow as tf\n+import tensorflow.compat.v1 as tf\n+tf.disable_v2_behavior()\n import numpy as np\n import argparse\n import facenet\ndiff --git a/src/face_rec.py b/src/face_rec.py\nindex 1eb578d..18c2d8f 100644\n--- a/src/face_rec.py\n+++ b/src/face_rec.py\n@@ -2,7 +2,9 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow as tf\n+#import tensorflow as tf\n+import tensorflow.compat.v1 as tf\n+tf.disable_v2_behavior()\n import argparse\n import facenet\n import os\ndiff --git a/src/facenet.py b/src/facenet.py\nindex bfe6802..5f577ef 100644\n--- a/src/facenet.py\n+++ b/src/facenet.py\n@@ -29,7 +29,10 @@ from __future__ import print_function\n \n import os\n from subprocess import Popen, PIPE\n-import tensorflow as tf\n+#import tensorflow as tf\n+import tensorflow.compat.v1 as tf\n+tf.disable_v2_behavior()\n+import imageio\n import numpy as np\n from scipy import misc\n from sklearn.model_selection import KFold\n@@ -244,7 +247,7 @@ def load_data(image_paths, do_random_crop, do_random_flip, image_size, do_prewhi\n     nrof_samples = len(image_paths)\n     images = np.zeros((nrof_samples, image_size, image_size, 3))\n     for i in range(nrof_samples):\n-        img = misc.imread(image_paths[i])\n+        img = imageio.imread(image_paths[i])\n         if img.ndim == 2:\n             img = to_rgb(img)\n         if do_prewhiten:'